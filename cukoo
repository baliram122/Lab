#include <stdio.h>
#include <stdlib.h>

#define TABLE_SIZE 11
#define MAX_ITERATIONS 50  // Limit to avoid infinite loops

typedef struct {
    int* table1;
    int* table2;
} CuckooHashTable;

// Hash Functions
int hash1(int key) {
    return key % TABLE_SIZE;
}

int hash2(int key) {
    return (key / TABLE_SIZE) % TABLE_SIZE;
}

// Initialize the Cuckoo Hash Table
CuckooHashTable* createTable() {
    CuckooHashTable* hashTable = (CuckooHashTable*)malloc(sizeof(CuckooHashTable));
    hashTable->table1 = (int*)malloc(TABLE_SIZE * sizeof(int));
    hashTable->table2 = (int*)malloc(TABLE_SIZE * sizeof(int));
    
    for (int i = 0; i < TABLE_SIZE; i++) {
        hashTable->table1[i] = -1;
        hashTable->table2[i] = -1;
    }
    
    return hashTable;
}

// Insert a key into the hash table
void insert(CuckooHashTable* hashTable, int key) {
    int pos1, pos2, temp, i;

    for (i = 0; i < MAX_ITERATIONS; i++) {
        pos1 = hash1(key);

        if (hashTable->table1[pos1] == -1) {
            hashTable->table1[pos1] = key;
            return;
        } else {
            // Displace the existing key in table1
            temp = hashTable->table1[pos1];
            hashTable->table1[pos1] = key;
            key = temp;
        }

        pos2 = hash2(key);

        if (hashTable->table2[pos2] == -1) {
            hashTable->table2[pos2] = key;
            return;
        } else {
            // Displace the existing key in table2
            temp = hashTable->table2[pos2];
            hashTable->table2[pos2] = key;
            key = temp;
        }
    }

    printf("Cycle detected or table is full. Insertion failed for key: %d\n", key);
}

// Search for a key in the hash table
int search(CuckooHashTable* hashTable, int key) {
    int pos1 = hash1(key);
    int pos2 = hash2(key);

    if (hashTable->table1[pos1] == key) {
        return pos1;
    } else if (hashTable->table2[pos2] == key) {
        return pos2;
    } else {
        return -1;  // Key not found
    }
}

// Delete a key from the hash table
void delete(CuckooHashTable* hashTable, int key) {
    int pos1 = hash1(key);
    int pos2 = hash2(key);

    if (hashTable->table1[pos1] == key) {
        hashTable->table1[pos1] = -1;
    } else if (hashTable->table2[pos2] == key) {
        hashTable->table2[pos2] = -1;
    } else {
        printf("Key not found: %d\n", key);
    }
}

// Display the hash table
void display(CuckooHashTable* hashTable) {
    printf("Table 1:\n");
    for (int i = 0; i < TABLE_SIZE; i++) {
        if (hashTable->table1[i] != -1) {
            printf("Index %d: %d\n", i, hashTable->table1[i]);
        } else {
            printf("Index %d: -\n", i);
        }
    }

    printf("Table 2:\n");
    for (int i = 0; i < TABLE_SIZE; i++) {
        if (hashTable->table2[i] != -1) {
            printf("Index %d: %d\n", i, hashTable->table2[i]);
        } else {
            printf("Index %d: -\n", i);
        }
    }
}

int main() {
    int choice, key;
    CuckooHashTable* hashTable = createTable();

    while (1) {
        printf("\nMenu:\n");
        printf("1. Insert\n");
        printf("2. Search\n");
        printf("3. Delete\n");
        printf("4. Display\n");
        printf("5. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter key to insert: ");
                scanf("%d", &key);
                insert(hashTable, key);
                break;
            case 2:
                printf("Enter key to search: ");
                scanf("%d", &key);
                int pos = search(hashTable, key);
                if (pos != -1) {
                    printf("Key %d found.\n", key);
                } else {
                    printf("Key not found.\n");
                }
                break;
            case 3:
                printf("Enter key to delete: ");
                scanf("%d", &key);
                delete(hashTable, key);
                break;
            case 4:
                display(hashTable);
                break;
            case 5:
                printf("Exit\n");
                free(hashTable->table1);
                free(hashTable->table2);
                free(hashTable);
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }

    return 0;
}
